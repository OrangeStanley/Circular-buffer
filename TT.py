class Buffer(list):
    """ Класс наследуем от класса списков, чтобы применять их методы"""

    def __init__(self, size):
        self.size = size
        """ Задаем размер контейнера"""
        self.buf = []
        """ Создание контейнера для хранения данных - списка"""
        self.id = 0
        """ Значение индекса старейшего элемента"""

    def read(self):
        """Задаем метода для чтения старейшего элемента и удаления его через метод pop для списков"""
        if len(self.buf) == 0:
            """Проверка на наличие элементов в буфере"""
            return ('Буфер пуст. Запишите в него элементы')
        else:
            """Так как буфер не пуст, то берем его старейший элемент"""
            return (self.buf.pop(self.id))

    def write(self, data):
        """Метод для записи и перезаписи буфера"""
        if len(self.buf) < self.size:
            """Случай, когда буфер заполнен неполностью (начало работы буфера или после чтения).
             Тут просто идет добавление нового элемента в конец"""
            self.buf.append(data)
        else:
            """Случай, когда буфер заполнен полностью и необходимо перезаписать старейший элемент. 
            После первого полного заполнения буфера старейшим элементом будет 
            нулевой элемент, после его перезаписи будет 1 и так далее, 
            поэтому после перезаписи прибавляем к индексу 1. 
            После того, как индекс старейшего элемента
            станет больше или равным размера списка необходимо будет взять его значение по модулю размера, 
            чтобы снова получить значения 0, 1 и т.д."""
            self.id %= self.size
            self.buf[self.id] = data
            self.id += 1

    def __repr__(self):
        return (repr(self))